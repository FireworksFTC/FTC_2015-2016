package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.LightSensor;
import com.qualcomm.robotcore.util.Range;

/**
 * Created by appx on 10/23/15.
 */
public class TestTeleOp extends OpMode {


    DcMotor motorRight;
    DcMotor motorLeft;
    LightSensor lSensor;

    float leftPower, rightPower;
    final double maxJoystickValue = 1.414;
    final double MEASURING_TIME = 2.0;

    int lightRaw, avgLight;
    boolean isScanningForLight;

    public TestTeleOp(){

    }

    public void init(){
        motorRight = hardwareMap.dcMotor.get("motor_2");
        motorLeft = hardwareMap.dcMotor.get("motor_1");
        motorRight.setDirection(DcMotor.Direction.REVERSE);

        lSensor = hardwareMap.lightSensor.get("light_sensor");
    }

    public void loop(){

        //movement
        leftPower = gamepad2.left_stick_y-gamepad2.left_stick_x;
        rightPower = gamepad2.left_stick_y+gamepad2.left_stick_x;
        telemetry.addData("1", "Raw left: "+String.format("%.2f",leftPower) + "  Raw right: "+String.format("%.2f",rightPower));

        leftPower = Range.clip(leftPower, -1, 1);
        rightPower = Range.clip(rightPower, -1, 1);

        leftPower = (float)scaleInput(leftPower);
        rightPower = (float)scaleInput(rightPower);

        motorLeft.setPower((double) leftPower);
        motorRight.setPower((double) rightPower);
        telemetry.addData("2", "Left: " + String.format("%.2f", leftPower) + " " + "Right: " + String.format("%.2f", rightPower));

        telemetry.addData("Time ", "Time: " + String.format("%.2f", time));

        //lower numbers = brighter light
        //blue is higher than red (but only slightly)
        lightRaw = lSensor.getLightDetectedRaw();
        if(gamepad2.x == true){
            avgLight = averageLight();
        }
    }

    public void stop(){

    }

    double scaleInput(double dVal)  {
        double[] scaleArray = { 0.0, 0.05, 0.09, 0.10, 0.12, 0.15, 0.18, 0.24,
                0.30, 0.36, 0.43, 0.50, 0.60, 0.72, 0.85, 1.00, 1.00 };

        // get the corresponding index for the scaleInput array.
        int index = (int) ((dVal/maxJoystickValue) * 16.0); //number is now <= 1

        // index should be positive.
        if (index < 0) {
            index = -index;
        }

        // index cannot exceed size of array minus 1.
        if (index > 16) {
            index = 16;
        }

        // get value from the array.
        double dScale = 0.0;
        if (dVal < 0) {
            dScale = -scaleArray[index];
        } else {
            dScale = scaleArray[index];
        }

        // return scaled value.
        return dScale;
    }

    int averageLight (){
        final double startTime = time
        double currentTime = time;
        int lastLight = -1, count = 0, total = 0;
        while(currentTime < MEASURING_TIME+startTime){
            telemetry.addData("Light: ", String.format("%d", lSensor.getLightDetectedRaw()));
            telemetry.addData("Times: ", String.format("%.2f", currentTime)+String.format("%.2f", startTime));

            if (lSensor.getLightDetectedRaw() != lastLight){
                lastLight = lSensor.getLightDetectedRaw();
                total += lastLight;
                count++;
            }
            currentTime = time;
        }
        return (total/count);
    }

}
