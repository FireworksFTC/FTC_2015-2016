package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.hardware.HiTechnicNxtDcMotorController;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.LightSensor;
import com.qualcomm.robotcore.util.Range;
import android.graphics.Color;

/**
 * Created by appx on 10/23/15.
 */
public class TestTeleOp extends OpMode {


    DcMotor motorRight;
    DcMotor motorLeft;
//    LightSensor lSensor;
     ColorSensor cSensor;

    float leftPower, rightPower;
    final double maxJoystickValue = 1.414;

    float hsvValues[] = {0,0,0};
    final float values[] = hsvValues;

    public TestTeleOp(){

    }

    public void init(){
        motorRight = hardwareMap.dcMotor.get("motor_2");
        motorLeft = hardwareMap.dcMotor.get("motor_1");
        motorRight.setDirection(DcMotor.Direction.REVERSE);

//        lSensor = hardwareMap.lightSensor.get("light_sensor");
        //cSensor = hardwareMap.colorSensor.get("color_sensor");

    }

    public void loop(){

        //movement
        leftPower = gamepad1.right_stick_y-gamepad1.right_stick_x;
        rightPower = gamepad1.right_stick_y+gamepad1.right_stick_x;
        telemetry.addData("Raw Values", "Raw left: "+String.format("%.2f",leftPower) + "  Raw right: "+String.format("%.2f",rightPower));

        leftPower = Range.clip(leftPower, -1, 1);
        rightPower = Range.clip(rightPower, -1, 1);

        leftPower = (float)scaleInput(leftPower);
        rightPower = (float)scaleInput(rightPower);

        motorLeft.setPower((double)leftPower);
        motorRight.setPower((double)rightPower);
        telemetry.addData("Powers", "Left: "+String.format("%.2f", leftPower) + " " + "Right: "+String.format("%.2f", rightPower));

        //light sensor
        Color.RGBToHSV(cSensor.red(), cSensor.green(), cSensor.blue(), hsvValues);

//        telemetry.addData("Color Sensor", "Blue: "+String.format("%d", cSensor.blue())+
//                " Red: "+String.format("%d", cSensor.red())+
//                " Green: "+String.format("%d", cSensor.green())+
//                " Alpha: "+String.format("%d", cSensor.alpha())+
//                " argb: "+String.format("%d", cSensor.argb()));
//        telemetry.addData("Clear", cSensor.alpha());
        telemetry.addData("Red  ", cSensor.red());
        telemetry.addData("Green", cSensor.green());
        telemetry.addData("Blue ", cSensor.blue());
        telemetry.addData("Hue", hsvValues[0]);
    }

    public void stop(){

    }

    double scaleInput(double dVal)  {
        double[] scaleArray = { 0.0, 0.05, 0.09, 0.10, 0.12, 0.15, 0.18, 0.24,
                0.30, 0.36, 0.43, 0.50, 0.60, 0.72, 0.85, 1.00, 1.00 };

        // get the corresponding index for the scaleInput array.
        int index = (int) ((dVal/maxJoystickValue) * 16.0); //number is now <= 1

        // index should be positive.
        if (index < 0) {
            index = -index;
        }

        // index cannot exceed size of array minus 1.
        if (index > 16) {
            index = 16;
        }

        // get value from the array.
        double dScale = 0.0;
        if (dVal < 0) {
            dScale = -scaleArray[index];
        } else {
            dScale = scaleArray[index];
        }

        // return scaled value.
        return dScale;
    }

}
