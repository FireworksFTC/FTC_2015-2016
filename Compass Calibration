package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.ftccommon.DbgLog;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.CompassSensor;
import com.qualcomm.robotcore.hardware.UltrasonicSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.LightSensor;

public class CompassCalibration extends OpMode {

  CompassSensor compass;
  UltrasonicSensor ultrasonicSensor;
  DcMotor motorRight;
  DcMotor motorLeft;
  double degree;
  double leftPower;
  double rightPower;
  boolean turned;
  boolean inFront;
  boolean reachedBeacon;
  LightSensor lSensorR, lSensorL;
  final double MEASURING_TIME = 2.0;
  double lightStartTime;
  int totalLightL, avgLightL = 0, count;
  int totalLightR, avgLightR = 0;
  boolean isScanningForLight;
  String desiredLight = "red";
  int pushLight = -1;

  @Override
  public void init() {
    compass = hardwareMap.compassSensor.get("compass");
    ultrasonicSensor = hardwareMap.ultrasonicSensor.get("ultrasonic_sensor");
    motorRight = hardwareMap.dcMotor.get("motor_2");
    motorLeft = hardwareMap.dcMotor.get("motor_1");
    motorRight.setDirection(DcMotor.Direction.REVERSE);
    lSensorL = hardwareMap.lightSensor.get("light_sensor_left");
    lSensorR = hardwareMap.lightSensor.get("light_sensor_right");
    turned = false;
    inFront = false;
    reachedBeacon = false;
    isScanningForLight = false;
  }

  @Override
  public void loop() {
    degree = compass.getDirection(); //get degree value from compass sensor
    telemetry.addData("Degree", "Degree of robot" + degree); //printing the degree of robot
    if (this.time < 2) { //if less than 2 seconds then go on low power in both motors
      rightPower = 0.15;
      leftPower = 0.15;

    } else if (degree > 180 && !turned) { // if time more than or equal to 2 seconds then if robot direction is more than 180 degrees then turn left
      rightPower = -0.15;
      leftPower = 0.15;

    } else if (degree < 45 && !turned) { // if robot direction is less than 45 degrees then turn left
      rightPower = -0.15;
      leftPower = 0.15;
    } else if (degree >= 45 && degree < 180 && !turned) { //if robot direction is more than 45 degrees and less than 180 degrees then go forward
      rightPower = 0.15;
      leftPower = 0.15;
      turned = true;
    } else if (this.time > 3 && this.time < 6.5 && turned) { //if time between 3 and 6.5 sec then go forward
      rightPower = 0.15;
      leftPower = 0.15;
    } else if (this.time > 6.5 && this.time <7.2) {
      rightPower = -0.15;
      leftPower = 0.15;
      inFront = true;
    } else if (inFront == true && !reachedBeacon && ultrasonicSensor.getUltrasonicLevel()>5){
      rightPower = 0.10;
      leftPower = 0.10;
      telemetry.addData("ultrasonicDistance",ultrasonicSensor.getUltrasonicLevel());
      reachedBeacon = true;
    } else if (reachedBeacon == true && this.time >8 && this.time <10){
      rightPower = 0;
      leftPower = 0;
      pushLight = pushLight();
      if (pushLight <0){
        ; //wait for scanning to end
      } else if (pushLight ==1){
        rightPower = -0.10;
        leftPower = 0.10;
      } else if (pushLight ==2){
        rightPower = 0.10;
        leftPower = -0.10;
      }
    } else {
      rightPower = 0;
      leftPower = 0;
    }

    motorRight.setPower(rightPower);
    motorLeft.setPower(leftPower);

  }

  int pushLight() {
    if (isScanningForLight == false) {
      isScanningForLight = true;
      lightStartTime = time;
      count = 0;
      totalLightR = 0;
      totalLightL = 0;
    }

    if (isScanningForLight == true) {
      totalLightR += lSensorR.getLightDetectedRaw(); //blue light is > than red light
      totalLightL += lSensorL.getLightDetectedRaw();
      count++;

      if (time > lightStartTime + MEASURING_TIME) {
        isScanningForLight = false;
        avgLightR = totalLightR / count;
        avgLightL = (totalLightL / count) - 20; //-20 for calibration

        if (desiredLight.toLowerCase().equals("red")) {
          if (avgLightL > avgLightR) { //the red light is on the right

            //add how to press the button with a finger
            return 1;
          }
          if (avgLightL < avgLightR) { //the red light is on the left
            //add how to press the button with a finger

            return 2;
          }
        }

        if (desiredLight.toLowerCase().equals("blue")) {
          if (avgLightL < avgLightR) { //the blue light is on the right

            //add how to press the button with a finger
            return 1;
          }
          if (avgLightL > avgLightR) { //the blue light is on the left

            //add how to press the button with a finger
            return 2;
          }
        }

        if (avgLightL == avgLightR) { //no decision made
          //add how to deal with failure
          return 0;
        }
      } else {
        return -1;
      }
    }

    return  0;
  }
}
